//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace WP8HF.GlobalWeatherServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.webserviceX.NET", ConfigurationName="GlobalWeatherServiceReference.GlobalWeatherSoap")]
    public interface GlobalWeatherSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetWeather", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://www.webserviceX.NET/GetCitiesByCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetCitiesByCountry(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface GlobalWeatherSoapChannel : WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCitiesByCountryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCitiesByCountryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GlobalWeatherSoapClient : System.ServiceModel.ClientBase<WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap>, WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap {
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCitiesByCountryDelegate;
        
        private EndOperationDelegate onEndGetCitiesByCountryDelegate;
        
        private System.Threading.SendOrPostCallback onGetCitiesByCountryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public GlobalWeatherSoapClient() {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GlobalWeatherSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWeatherCompletedEventArgs> GetWeatherCompleted;
        
        public event System.EventHandler<GetCitiesByCountryCompletedEventArgs> GetCitiesByCountryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap.BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap.EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CityName = ((string)(inValues[0]));
            string CountryName = ((string)(inValues[1]));
            return ((WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap)(this)).BeginGetWeather(CityName, CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            string retVal = ((WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap)(this)).EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(string CityName, string CountryName) {
            this.GetWeatherAsync(CityName, CountryName, null);
        }
        
        public void GetWeatherAsync(string CityName, string CountryName, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        CityName,
                        CountryName}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap.BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap.EndGetCitiesByCountry(System.IAsyncResult result) {
            return base.Channel.EndGetCitiesByCountry(result);
        }
        
        private System.IAsyncResult OnBeginGetCitiesByCountry(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CountryName = ((string)(inValues[0]));
            return ((WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap)(this)).BeginGetCitiesByCountry(CountryName, callback, asyncState);
        }
        
        private object[] OnEndGetCitiesByCountry(System.IAsyncResult result) {
            string retVal = ((WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap)(this)).EndGetCitiesByCountry(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCitiesByCountryCompleted(object state) {
            if ((this.GetCitiesByCountryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCitiesByCountryCompleted(this, new GetCitiesByCountryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCitiesByCountryAsync(string CountryName) {
            this.GetCitiesByCountryAsync(CountryName, null);
        }
        
        public void GetCitiesByCountryAsync(string CountryName, object userState) {
            if ((this.onBeginGetCitiesByCountryDelegate == null)) {
                this.onBeginGetCitiesByCountryDelegate = new BeginOperationDelegate(this.OnBeginGetCitiesByCountry);
            }
            if ((this.onEndGetCitiesByCountryDelegate == null)) {
                this.onEndGetCitiesByCountryDelegate = new EndOperationDelegate(this.OnEndGetCitiesByCountry);
            }
            if ((this.onGetCitiesByCountryCompletedDelegate == null)) {
                this.onGetCitiesByCountryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCitiesByCountryCompleted);
            }
            base.InvokeAsync(this.onBeginGetCitiesByCountryDelegate, new object[] {
                        CountryName}, this.onEndGetCitiesByCountryDelegate, this.onGetCitiesByCountryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap CreateChannel() {
            return new GlobalWeatherSoapClientChannel(this);
        }
        
        private class GlobalWeatherSoapClientChannel : ChannelBase<WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap>, WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap {
            
            public GlobalWeatherSoapClientChannel(System.ServiceModel.ClientBase<WP8HF.GlobalWeatherServiceReference.GlobalWeatherSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWeather(string CityName, string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = CityName;
                _args[1] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetWeather", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCitiesByCountry(string CountryName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CountryName;
                System.IAsyncResult _result = base.BeginInvoke("GetCitiesByCountry", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetCitiesByCountry(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetCitiesByCountry", _args, result)));
                return _result;
            }
        }
    }
}
